include std

-- An attempt at pre-emptive concurrency.

interface Stop = stop : Unit

interface Go = go : Unit

interface PromiseStop = promiseStop : {Unit -> [RefState, PromiseGo, AwaitGo, PromiseStop, Console, Yield]Unit} -> Unit

interface PromiseGo = promiseGo : {Unit -> [RefState, PromiseGo, AwaitGo, PromiseStop, Console, Yield]Unit} -> Unit

-- interface AwaitGo = awaitGo : Ref (Maybe Unit) -> Maybe Unit
interface AwaitGo = awaitGo : Unit

interface Yield = yield : Unit

waitForStop : {[PromiseStop, Console, PromiseGo, RefState, AwaitGo, Yield]Unit}
-- First we wait for the stop signal to come in.
-- This wait is done non-blocking.
waitForStop! = promiseStop { _ ->
                            -- When we receive stop we have to stop computing.
                            -- Hence we make a new promise for Go and await
                            -- this.
                            let res = new nothing in
                            promiseGo {p -> write res (just unit); unit};
                            -- promiseGo {p -> new nothing; unit};
                            -- awaiter res;
                            awaitGo;
                            -- When we receive Go, we start computing again
                            -- and reinstall the stop waiter.
                            waitForStop!}

counter : {Int -> [Console, Yield]Unit}
counter x = ouint x; print " ";
            sleep 20000;
            yield!;
            counter (x + 1)

threadP : {[PromiseStop, Console, PromiseGo, RefState, AwaitGo, Yield]Unit}
threadP! = waitForStop!; counter 0

controller : {[Stop, Go, Console]Unit}
controller! = stop!; print "\n*- stop\n"; sleep 500000; print "\n*- go\n"; go!; sleep 500000; controller!

-- awaiter : {Ref (Maybe Unit) -> [AwaitGo, Console]Unit}
-- awaiter cell = case (awaitGo cell) { nothing  -> -- print "\n Restarting await\n";
--                                                  awaiter cell
--                                    | (just x) -> --print "\n Exiting Await\n";
--                                                  x }

sch : {Maybe {Unit -> [RefState, PromiseGo, AwaitGo, PromiseStop, Console, Yield]Unit}    -- stopper
    -> Maybe {Unit -> [RefState, PromiseGo, AwaitGo, PromiseStop, Console, Yield]Unit}    -- goer
    -> Maybe {Unit -> [RefState, PromiseGo, AwaitGo, PromiseStop, Console, Yield]Unit}    -- goer
    -> <PromiseStop, PromiseGo, AwaitGo, Yield>Unit
    -> <Stop, Go>Unit
    -> [Console, RefState]Unit}

-- Installing Promises
sch goRes _ goer <promiseStop stpr -> thread> <control> =
    -- print "stop installed\n";
    sch goRes (just stpr) goer (thread unit) control!

sch goRes stpr _ <promiseGo goer -> thread> <control> =
    -- print "go installed";
    sch goRes stpr (just goer) (thread unit) control!

-- Yielding to allow messages to come into the client
sch goRes (just stpr) goer <yield -> thread> <stop -> control> =
    sch goRes nothing goer (stpr unit; thread unit) (control unit)

sch goRes stpr (just goer) <yield -> thread> <go -> control> =
    sch goRes stpr nothing (goer unit; thread unit) (control unit)

sch goRes stpr goer <yield -> thread> <control> =
    sch goRes stpr goer (thread unit) control!

-- Executing promises
-- Priority is given to go
sch (just goRes) stpr (just goer) unit <go -> control> =
    sch nothing stpr nothing (goer unit; goRes unit) (control unit)

sch goRes (just stpr) goer <thread> <stop -> control> =
    sch goRes nothing goer (stpr unit; thread!) (control unit)

sch goRes nothing goer <thread> <stop -> control> =
    sch goRes nothing goer thread! (control unit)

sch goRes stpr nothing <thread> <go -> control> =
    sch goRes stpr nothing thread! (control unit)

-- Taking the resumption from Await and storing it
sch goRes stpr goer <awaitGo -> thread> <control> =
    sch (just thread) stpr goer unit control!

-- Finishing
sch _ _ _ unit _ = print "\nThread finished"
sch _ _ _ _ unit = print "\nController finished"


main : {[Console, RefState]Unit}
main! = sch nothing nothing nothing threadP! controller!
