--- start of standard stuff ---
map : {{X -> Y} -> List X -> List Y}
map f []        = []
map f (x :: xs) = f x :: map f xs

print : {String -> [Console]Unit}
print s = map ouch s; unit

-- lazy conditional
if : {Bool -> {X} -> {X} -> X}
if true  t f = t!
if false t f = f!
--- end of standard stuff ---


interface Next = next : Unit

interface Idle = idle : Unit

interface Item = item : String -> Unit

interface NewData = newData : List String -> Unit

interface Request = request : List String

nth : {Int -> List X -> X}
nth 0 (cons s _)  = s
nth k (cons _ xs) = nth (k - 1) xs

len : {List X -> Int}
len nil = 0
len (cons _ xs) = 1 + len xs

concat : {List X -> List X -> List X}
concat nil ys = ys
concat (cons x xs) ys = cons x (concat xs ys)

user : {[Console, Next]Unit}
user! = inch!; next!; user!

client : Int -> List String -> [Console, Idle, Request]Unit
client currItem strs = (if (len (strs) - 3 < currItem)
           {print ("getting more data"); client (currItem) (concat strs (request!))}
           {idle!; print (nth currItem strs); client (currItem + 1) strs})

server : {[NewData, Idle]Unit}
server! = let words = ["one", "two", "three", "four", "five", "six"]
          in
          newData (words); server!

schedule : {<Next>Unit -> <Idle, Request>Unit -> <NewData, Idle> Unit -> [Console]Unit}
schedule <next -> user> <idle -> client>    <server> =
         schedule (user unit) (client unit) server!
schedule <user>         <request -> client> <newData sts -> server> =
         schedule user! (client sts) (server unit)


main : {[Console]Unit}
main! = let words = ["one", "two", "three", "four", "five", "six"]
        in
        (schedule user! (client 0 words) server!)
