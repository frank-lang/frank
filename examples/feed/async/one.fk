include async
include printint

-- calcProg : {Int -> Int -> Int -> [E | Async [Console], Console]Int}
-- calcProg a b c = print "M1  ";
--                  let p1 = async {print "p1  "; a + b} in
--                  let p2 = async {print "p2  "; b + c} in
--                  print "M2  ";
--                  let v2 = await p2 in
--                  print "M3  ";
--                  let v1 = await p1 in
--                  print "M4  ";
--                  v1 + v2
--

------- BEGIN STD -----------------------
-- lazy conditional
if : {Bool -> {X} -> {X} -> X}
if true  t f = t!
if false t f = f!

and : {Bool -> Bool -> Bool}
and true  y = y
and false _ = false

not : Bool -> Bool
not true = false
not false = true

len : {List X -> Int}
len nil = 0
len (cons _ xs) = 1 + len xs

range : Int -> Int -> List Int
range from to = if (from == to)
                   {nil}
                   {cons from (range (from + 1) to)}


while : {Bool} -> {Unit} -> Unit
while cond body = if cond! { body!; while cond body }
                            { unit }

nth : {Int -> List X -> X}
nth 0 (cons s _)  = s
nth k (cons _ xs) = nth (k - 1) xs

concat : {List X -> List X -> List X}
concat nil ys = ys
concat (cons x xs) ys = cons x (concat xs ys)

------- END STD --------------------------

user : {[Console]Unit}
user! = inch!; unit

server : {Int -> List Int}
server x = range x (x + 10)

client : {[E | Async [Console], Console, RefState] Unit}
client! = let currItem = new 0 in
          let requestInProgress = new true in
          let cachedData = new nil in
          let serverRequest = new (async {server 0}) in

          (while {true}
          {
              -- 1. Wait for the user to press enter, meaning that we want to
              -- have more information.
              await (async {user!});

              -- 2. See if we need to collect.
              (if ((read currItem) == (len (read cachedData)))
                  {print "\n*- awaiting\n";
                   write cachedData (concat (read cachedData) (await (read serverRequest)));
                   write requestInProgress false}
                  {unit});

              -- 3. See if we need to issue a new request.
              let cacheLength = read cachedData in
              (if (and (((len cacheLength) - 5) < read currItem)
                       (not (read requestInProgress)))
                 {print "\n*-requesting\n";
                  write serverRequest (async {server (len cacheLength)});
                  write requestInProgress true}
                 {unit});

              -- 4. Print the current item and increment the pointer.
              if (read (currItem) < len (read cachedData))
                 {print (toString (nth (read currItem) (read cachedData))); print (" ");
                  write currItem (read currItem + 1)
                 }
                 {print ("\n*- Out of data; please wait and try again.\n")}
          })






main : {[RefState, Console]Unit}
main! = runAsync client!
