include printint

include std

--- Interfaces and data types

interface Next = next : Unit

interface Idle = idle : Unit

interface IdleServer = idleServer : ServerAction

data ServerAction = dataReq Int | batchReq

interface BatchSizeRequest = batchSizeRequest : Maybe Int

interface BatchSizeResponse = batchSizeResponse : Int -> Unit

interface Response = response : List Int -> Unit

interface Request = request : Int -> Unit

interface Collect = collect : Maybe (List Int)

interface PromiseNext =
          promiseNext : {Unit -> [PromiseNext, Idle, Console, RefState, Request, PromiseResponse]Unit} -> Unit

interface PromiseResponse = promiseResponse : {List Int -> [Console, RefState]Unit} -> Unit

interface PromiseRequest = promiseRequest : {Int -> [Console, RefState, PromiseRequest, Response]Unit} -> Unit

data Maybe X = nothing | just X


user : {[Console, Next]Unit}
user! = inch!; next!; user!

clientInit : [Console, Idle, Request, RefState, PromiseResponse, PromiseNext] Unit
clientInit! =
    let currItem = new 0 in
    let reqInProg = new false in
    let cachedData = new nil in
    let batchSize = new 10 in
        clientLoop currItem reqInProg cachedData batchSize

server : {[Response, IdleServer, Console]Unit}
server! = case (idleServer!) { (dataReq x) -> response (range x (x + 10)); server! }

serverPromise : {Int -> [Response, PromiseRequest, Console, RefState]Unit}
serverPromise x = response (range x (x + 10)); promiseRequest (serverPromise)

server2 : {[Response, PromiseRequest, Console, RefState]Unit}
server2! = -- let serverPromise = {x -> (range x (x + 10)); promiseRequest (serverPromise)} in
              promiseRequest serverPromise
                            

-- awaiting
clientLoop : {Ref Int -> Ref Bool -> Ref (List Int) -> Ref Int ->
             [Console, Idle, Request, PromiseResponse, RefState, PromiseNext]Unit}
clientLoop currItem reqInProg cachedData batchSize =
        promiseNext (
         {_ ->
          -- check if we need to make a request for extra data
          (let cachedSize = len (read cachedData) in
          if (and ((cachedSize - (div (read batchSize) 2)) < read currItem)
                   (not (read reqInProg)))
            {print ("\n*- requesting more data\n");
             -- invoke the request effect.
             request cachedSize;
             -- invoke the promise response effect with this
             -- irritatingly, we can't use this as a separate function ... Not sure why
             promiseResponse (
                     {newdata ->
                       write cachedData (concat (read cachedData) newdata);
                       write reqInProg false
                     });
             write reqInProg true}
             {unit};

          -- if we're at the end, try and collect the rest of the data
          if (read currItem == len (read cachedData))
              { print "*- please wait and try again.\n" }

              -- if none of the previous conditions are true, just print out the current data point and move on.
              {ouint (nth (read currItem) (read cachedData));
               print " ";
               write currItem ((read currItem) + 1)};

         clientLoop currItem reqInProg cachedData batchSize
         )
         })

--------------
--- Scheduler
--------------
schedule : {(Maybe {List Int -> [Console, RefState]Unit}) ->  -- response callback
           (Maybe {Int -> [Response, PromiseRequest, Console, RefState]Unit}) -> -- request callback
           -- <Response, IdleServer> Unit ->                     -- Server
           <Response, PromiseRequest> Unit ->                     -- Server
           <Idle, Request, PromiseResponse, PromiseNext>Unit -> -- Client
           <Next>Unit ->                                     -- User
           [Console, RefState]Unit}

-- here we take the data from the response effect and invoke the callback with it.
-- the actual update action should probably be done on the client "thread"
schedule (just respCB) reqCB <response strs -> server> <client> <user> =
         respCB strs;
         schedule nothing reqCB (server unit) (client!) user!

-- user requesting more data to be displayed
schedule respCB  reqCB <server> <idle -> client> <next -> user> =
         schedule respCB reqCB server! (client unit) (user unit)

-- this MIGHT be out of order
schedule respCB _ <promiseRequest reqCB -> server> <client> <user> =
         schedule respCB (just reqCB) (server unit) client! user!

-- executing the request promise
schedule respCB (just reqCB) <server> <request n -> client> <user> =
         schedule respCB nothing (reqCB n; server!) (client unit) user!

-- When the `promise response` effect is invoked, the scheduler takes the
-- callback and stores it until the server invokes the response effect
schedule _ reqCB <server> <promiseResponse respCB -> client> <user> =
         schedule (just respCB) reqCB server! (client unit) user!

-- in this case we can throw await the continuation of the client.
schedule respCB reqCB <server> <promiseNext callback -> _> <next -> user> =
         -- callback unit;
         schedule respCB reqCB server! (callback unit) (user unit)


-- exiting.
schedule _ _ unit _ _ = print "\n*-User exits.\n"
schedule _ _ _ unit _ = print "\n*-Client exits.\n"
schedule _ _ _ _ unit = print "\n*-Server exits.\n"


main : {[Console, RefState]Unit}
-- main! = schedule nothing server! clientInit! user!
main! = schedule nothing nothing server2! clientInit! user!
