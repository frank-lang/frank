include printint

include std

--- Interfaces and data types

interface Next = next : Unit

interface Idle = idle : Unit

interface IdleServer = idleServer : ServerAction

data ServerAction = dataReq Int | batchReq

interface BatchSizeRequest = batchSizeRequest : Maybe Int

interface BatchSizeResponse = batchSizeResponse : Int -> Unit

interface NewData = newData : List Int -> Unit

interface Request = request : Int -> Unit

interface Collect = collect : Maybe (List Int)

data Maybe X = nothing | just X


user : {[Console, Next]Unit}
user! = inch!; next!; user!

-- awaiting
clientLoop : Bool -> Int -> Int -> List Int -> [Console, Idle, Collect, Request]Unit
clientLoop reqInProg batchSize currItem strs =
    idle!;
    (if (and (len strs - (div batchSize 2) < currItem) (not reqInProg))
       {print ("*- requesting more data\n"); request (len strs); clientLoop true batchSize currItem strs}

       {if (currItem == len strs)
           {print ("*- trying to collect\n") ;
            case (collect!) { nothing -> print ("*- please wait and try again.\n"); clientLoop reqInProg batchSize currItem strs
                            | (just d) -> clientLoop false batchSize currItem (concat strs d) } }
           {ouint ((nth currItem strs)); clientLoop reqInProg batchSize (currItem + 1) strs}
       })

awaitBSR : {[Console, BatchSizeRequest]Int}
awaitBSR! = case (batchSizeRequest!) { (just x) -> x
                                     | nothing -> awaitBSR!}

clientInit : [Console, Idle, Collect, Request, BatchSizeRequest] Unit
clientInit! = let batchsize = awaitBSR! in
              clientLoop false batchsize 0 nil
              


server : {[NewData, BatchSizeResponse, IdleServer]Unit}
server! = case (idleServer!) { (dataReq x) -> newData (range x (x + 10)); server!
                             | batchReq    -> batchSizeResponse 10; server!}

--------------
--- Scheduler
--------------
schedule : {Maybe (List Int) ->                              -- Data from Server -> Client
           <Next>Unit ->                                     -- User
           <Idle, Collect, Request, BatchSizeRequest>Unit -> -- Client
           <NewData, IdleServer, BatchSizeResponse> Unit ->  -- Server
           [Console]Unit}

-- user requesting more data to be displayed
schedule d <next -> user> <idle -> client>    <server> =
         schedule d (user unit) (client unit) server!

-- client requesting more data
schedule d <user>         <request n -> client> <idleServer -> server> =
         schedule d user! (client unit) (server (dataReq n))

-- taking data from server and storing temporarily
schedule d <user>         <client> <newData strs -> server> =
         schedule (just strs) user! client! (server unit)

-- client makes batch size req, need to tell server. the client awaits the
-- result of this, hence we return nothing until a suitable response exists.
schedule d <user> <batchSizeRequest -> client> <idleServer -> server> =
         schedule d user! (client nothing) (server batchReq)
schedule d <user> <batchSizeRequest -> client> <batchSizeResponse x -> server> =
         schedule d user! (client (just x)) (server unit)

-- picking up data from the store
schedule nothing <user>   <collect -> client> <server> =
         schedule nothing user! (client nothing) server!
schedule (just d) <user>  <collect -> client> <server> =
         schedule nothing user! (client (just d)) server!

-- exiting.
schedule _ unit _ _ = print "\n*-User exits.\n"
schedule _ _ unit _ = print "\n*-Client exits.\n"
schedule _ _ _ unit = print "\n*-Server exits.\n"


main : {[Console]Unit}
main! = schedule nothing user! (clientInit!) (server!)
