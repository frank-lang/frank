include std

-- Let's have two threads. The client requests the server for data, and installs
-- a promise that it acts on when the server returns. The server can do some
-- other things, but will eventually send the request.

interface Whatever = whatever : Unit

interface Response = response : Int -> Unit

interface Request = request : Unit

interface PromiseResponse =
          -- The pollution in the return type of the callback is very annoying.
          promiseResponse : {Int -> [PromiseResponse, AwaitResponse, RefState, Console]Unit} -> Unit

interface AwaitResponse = awaitResponse : Ref (Maybe Int) -> Maybe Int

-- client makes the request and installs the promise. it waits for a result and
-- then will continue computing.

awaitResp : {Ref (Maybe Int) -> [AwaitResponse, RefState]Int}
awaitResp cell = case (awaitResponse cell) { nothing  -> awaitResp cell
                                           | (just x) -> x}

client2 : {[PromiseResponse, RefState, AwaitResponse, Console]Unit}
client2! = let result = new nothing in
            promiseResponse {x -> write result (just x); unit} ;
            print "response is "; ouint (awaitResp result); print ", the end\n"

server : {[Response, Whatever] Unit}
server! = whatever!; whatever!; response 10

schedule : {Maybe {Int -> [PromiseResponse, AwaitResponse, RefState, Console]Unit}
         -> <PromiseResponse, AwaitResponse> Unit
         -> <Response, Whatever> Unit
         -> [RefState, Console]Unit}

schedule _ <promiseResponse cb -> client> <server> =
         schedule (just cb) (client unit) server!

schedule (just cb) <client> <response x -> server> =
         schedule nothing (cb x; client!) (server unit)

schedule cb <client> <whatever -> server> =
         schedule cb client! (print "whatever\n"; server unit)

schedule cb <awaitResponse cell -> client> <server> =
         schedule cb (client (read cell)) server!

schedule _ unit _ = print "\nclient exits\n"
schedule _ _ unit = print "\nserver exits\n"


main : {[RefState, Console]Unit}
main! = schedule nothing client2! server!
-- main! = schedule nothing server! client!
