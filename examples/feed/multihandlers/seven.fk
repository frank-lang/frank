-- include printint

include async-lib

--- start of standard stuff ---
map : {{X -> Y} -> List X -> List Y}
map f []        = []
map f (x :: xs) = f x :: map f xs

print : {String -> [Console]Unit}
print s = map ouch s; unit

-- lazy conditional
if : {Bool -> {X} -> {X} -> X}
if true  t f = t!
if false t f = f!

while : {Bool} -> {Unit} -> Unit
while cond body = if cond! { body!; while cond body }
                            { unit }

and : {Bool -> Bool -> Bool}
and true  y = y
and false _ = false

not : Bool -> Bool
not true = false
not false = true

take : {Int -> List X -> List X}
take 0 _ = nil
take k (cons x xs) = cons x (take (k - 1) xs)

drop : {Int -> List X -> List X}
drop 0 xs = xs
drop k nil = nil
drop k (cons x xs) = drop (k - 1) xs

range : Int -> Int -> List Int
range from to = if (from == to)
                   {nil}
                   {cons from (range (from + 1) to)}

nth : {Int -> List X -> X}
nth 0 (cons s _)  = s
nth k (cons _ xs) = nth (k - 1) xs

len : {List X -> Int}
len nil = 0
len (cons _ xs) = 1 + len xs

concat : {List X -> List X -> List X}
concat nil ys = ys
concat (cons x xs) ys = cons x (concat xs ys)
--- end of standard stuff ---

--- Interfaces and data types

interface Next = next : Unit

interface Idle = idle : Unit

interface IdleServer = idleServer : ServerAction

data ServerAction = dataReq Int | batchReq

interface BatchSizeRequest = batchSizeRequest : Maybe Int

interface BatchSizeResponse = batchSizeResponse : Int -> Unit

interface NewData = newData : List Int -> Unit

interface Request = request : Int -> Unit

interface Collect = collect : Maybe (List Int)

data Maybe X = nothing | just X


user : {[Console, Next]Unit}
user! = inch!; next!; user!

-- awaiting
clientLoop : Int -> [Console, Idle, Collect, Request, RefState]Unit
clientLoop bs =
    let currItem = new 0 in
    let reqInProg = new false in
    let cachedData = new nil in
    let batchSize = new bs in

    while {true}
    {
        idle!;
        -- check if we need to make a request for extra data
        (if (and ((len (read cachedData) - (div (read batchSize) 2)) < read currItem) (not (read reqInProg)))
          {print ("\n*- requesting more data\n");
           request (len (read cachedData));
           write reqInProg true}

           -- if we're at the end, try and collect the rest of the data
           {if (read currItem == len (read cachedData))
               {print ("\n*- trying to collect\n");
                case (collect!) { nothing  -> print ("*- please wait and try again.\n")
                                | (just d) -> write cachedData (concat (read cachedData) d) ;
                                              write reqInProg false } }

               -- if none of the previous conditions are true, just print out the current data point and move on.
               {ouint (nth (read currItem) (read cachedData));
                print " ";
                write currItem ((read currItem) + 1)}
           })
    }



awaitBSR : {[Console, BatchSizeRequest]Int}
awaitBSR! = case (batchSizeRequest!) { (just x) -> x
                                     | nothing -> awaitBSR!}

clientInit : [Console, Idle, Collect, Request, BatchSizeRequest, RefState] Unit
clientInit! = let batchsize = awaitBSR! in
              clientLoop batchsize


server : {[NewData, BatchSizeResponse, IdleServer]Unit}
server! = case (idleServer!) { (dataReq x) -> newData (range x (x + 10)); server!
                             | batchReq    -> batchSizeResponse 10; server!}

--------------
--- Scheduler
--------------
schedule : {Maybe (List Int) ->                              -- Data from Server -> Client
           <Next>Unit ->                                     -- User
           <Idle, Collect, Request,
            BatchSizeRequest>Unit ->               -- Client
           <NewData, IdleServer, BatchSizeResponse> Unit ->  -- Server
           [Console]Unit}

-- user requesting more data to be displayed
schedule d <next -> user> <idle -> client>    <server> =
         schedule d (user unit) (client unit) server!

-- client requesting more data
schedule d <user>         <request n -> client> <idleServer -> server> =
         schedule d user! (client unit) (server (dataReq n))

-- taking data from server and storing temporarily
schedule d <user>         <client> <newData strs -> server> =
         schedule (just strs) user! client! (server unit)

-- client makes batch size req, need to tell server. the client awaits the
-- result of this, hence we return nothing until a suitable response exists.
schedule d <user> <batchSizeRequest -> client> <idleServer -> server> =
         schedule d user! (client nothing) (server batchReq)
schedule d <user> <batchSizeRequest -> client> <batchSizeResponse x -> server> =
         schedule d user! (client (just x)) (server unit)

-- picking up data from the store
schedule nothing <user>   <collect -> client> <server> =
         schedule nothing user! (client nothing) server!
schedule (just d) <user>  <collect -> client> <server> =
         schedule nothing user! (client (just d)) server!

-- exiting.
schedule _ unit _ _ = print "\n*-User exits.\n"
schedule _ _ unit _ = print "\n*-Client exits.\n"
schedule _ _ _ unit = print "\n*-Server exits.\n"


main : {[Console, RefState]Unit}
main! = schedule nothing user! (clientInit!) (server!)
