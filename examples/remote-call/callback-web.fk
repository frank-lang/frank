include std

include asynclib

-- Interfaces

interface Result = resultEff : Int -> Unit

interface WebResult = webResult : String -> Unit

interface Call = callEff : Int -> String -> {String -> [RefState]Unit} -> Unit

interface Cancel = cancelEff : Int -> Unit

interface Wait = wait : RemoteSignal


data RemoteSignal = call Int String {String -> [RefState]Unit}
                  | result Int

-- This is the remote web request
remoteRequest : {String -> [Web]String}
remoteRequest arg = getRequest (concat "http://api.mathjs.org/v4/?expr=10*" arg)

controller : {[Call, Result, RefState]Unit}
controller! = let res1 = new "notyet" in
              let res2 = new "notyet2" in
              callEff 1 "10" {st -> write res1 st}; callEff 2 "20" {st -> write res2 st}
              -- print (read res1); print "\n"; print (read res2)

-- remote : {[Wait, Console, RefState, Web, Async [Web, RefState]] Unit}
remote : {[Wait, Console] Unit}
-- remote : {Map Int (Promise Unit ) -> [E | Wait, Console, RefState, Web] Unit}
remote! = case wait!
             {
               (call id arg callback) -> -- Create new thread to do the request.
                                -- remote (insert id (async {callback (remoteRequest arg)}) map)
                                -- async {callback (remoteRequest arg)}; remote
                                -- let ans = remoteRequest arg in
                                -- callback (ans); remote
                                print arg; remote
                                -- callback (remoteRequest arg); remote
             }

par : {<Wait>Unit ->
       <Call, Result>Unit ->
       [Console] Unit}

-- controller calls the remote function.
par <wait -> remote> <callEff id arg callback -> k> =
    par (remote (call id arg callback)) (k unit)

par <wait -> remote> <resultEff id -> k> =
    par (remote (result id)) (k unit)

-- finishing
par unit <m> = print "Remote done"
par <m> unit = print "Controller done"

intermediate : {[Console, RefState, Web, Async[Web, RefState]]Unit}
intermediate! = par (remote ) controller!

main : {[Console, RefState, Web] Unit}
main! = runAsync intermediate
