include printint

-------- standard stuff

data Pair X Y = pair X Y

-- lazy conditional
if : {Bool -> {X} -> {X} -> X}
if true  t f = t!
if false t f = f!

data Maybe X = nothing | just X


mapF : {{X -> Y} -> List X -> List Y}
mapF f []        = []
mapF f (x :: xs) = f x :: mapF f xs

print : {String -> [Console]Unit}
print s = mapF ouch s; unit
----- end standard stuff

------ map stuff
data Map K V = map (List (Pair K V))

unmap : Map K V -> List (Pair K V)
unmap (map l) = l

lookup : {{K -> K -> Bool} -> K -> Map K V -> Maybe V}
lookup _ _ (map nil) = nothing
lookup eq k (map ((pair k' v) :: rest)) = if (eq k k') {just v} {lookup eq k (map rest)}

lookupHard : {{K -> K -> Bool} -> K -> Map K V -> V}
-- lookupHard _ _ (map nil) = nothing
lookupHard eq k (map ((pair k' v) :: rest)) = if (eq k k') {v} {lookupHard eq k (map rest)}

delete : {{K -> K -> Bool} -> K -> Map K V -> Map K V}
delete _ _ (map nil) = map nil
delete eq k (map ((pair k' v) :: rest)) = if (eq k k') {delete eq k (map rest)} {map ((pair k' v) :: unmap (delete eq k (map rest)))}

insert : K -> V -> Map K V -> Map K V
insert key value (map list) = map (cons (pair key value) list)
------ end map stuff



eqn : {Int -> Int -> Bool}
eqn x y = x == y


interface Cancel = cancel : Int -> Unit

interface TakeResult = take : Unit -> Int

interface Done = done : Int

interface Result = result : Int -> Unit

interface Call = callF : (Pair Int Int) -> Unit

interface WaitRemote = waitRemote : RemoteSignal

data RemoteSignal = call Int Int | cancel Int


controller : {[Call, Result, Cancel] Unit}
controller! = callF (pair 1 10); result 1; unit!
-- controller! = callF (pair 1 10); result 1; callF (pair 2 20); callF (pair 3 30); cancel 3; unit

longF : {Int -> Int}
longF x = 10 + 20 + 30 + x

remote : {Map Int Int -> <Call, Result, Cancel> Unit -> [Console]Unit}
remote m <callF (pair value callNo) -> k> = remote (insert callNo (longF value) m) (k unit)
remote m <result callNo -> k> = print (toString (lookupHard eqn callNo m));
                                remote (delete eqn callNo m) (k unit)
remote m <cancel callNo -> k> = remote (delete eqn callNo m) (k unit)
remote m unit = unit


-- schedule : {[Cancel, TakeResult]Unit ->     -- user, possibly cancelling computations
--             [Done]Unit ->     -- remote thread
--             [Console]Unit}

main : {[Console]Unit}
main! = remote (map nil) controller!
