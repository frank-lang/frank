include std

include asynclib

-- Interfaces

interface Result = resultEff : Int -> Unit

interface Call = callEff : Int -> String -> {String -> [RefState]Unit} -> Unit

interface Cancel = cancelEff : Int -> Unit

interface Wait = wait : RemoteSignal

data RemoteSignal = call Int String | cancel Int | result Int | pass

-- This is the remote web request
remoteRequest : {String -> [Console]String}
remoteRequest arg = webReq (concat "curl --request GET http://api.mathjs.org/v4/?expr=10*" arg)

-- sum : {Int}
-- sum! = 2+2

remote : {Map Int (Promise String [Console]) -> [E | Wait, Console, Async [Console]] Unit}
remote map = case wait!
             {
                  (call id arg) -> -- Create new thread to do the request.
                                   remote (insert id (async {
                                          webReq (concat "curl --request GET http://api.mathjs.org/v4/?expr=10*" arg)
                                   }) map)
                | (result id) ->  -- Await the thread.
                                   print (await (lookupHard eqn id map));
                                   remote (delete eqn id map)
             }

controller : {[Call, Result, RefState]Unit}
controller! = let cell1 = new "" in
              let cell2 = new "" in

              callEff 1 "10" {res -> write cell1 res};
              callEff 2 "20" {res -> write cell2 res};
              resultEff 2; resultEff 1

par : {<Wait>Unit ->
       <Call, Result>Unit ->
       [Console] Unit}

-- controller calls the remote function.
par <wait -> remote> <callEff id arg -> k> =
    par (remote (call id arg)) (k unit)

par <wait -> remote> <resultEff id -> k> =
    par (remote (result id)) (k unit)

-- finishing
par unit <m> = print "Remote done"
par <m> unit = print "Controller done"

main : {[Console, RefState] Unit}
main! = runAsync (par (remote mnil) controller!)
