-- This used to be a valid program, but there was a type error that was
-- not detected by the compiler.

-- #desc Regression for type-checking bug
-- #return failed to unify Y (line 18 , column 32) with X (line 18 , column 22)

-- BEGIN ORIGINAL file (tests/should-pass/shift/r.two-readers.fk)
-- Regression for a bug concerning lift and expandAb, discovered by Sam.
-- Problem description in commit 86e0ecd2d

interface Reader S = ask : S

data Pair X Y = pair X Y

readPair : {[Reader X, Reader Y](Pair X Y)}
readPair! = pair (<-Reader> ask!) (ask!)

readPair' : {[Reader X, Reader Y](Pair Y X)}
readPair'! = pair (<-Reader> ask!) (ask!)

readPair'' : {[Reader X, Reader Y](Pair X Y)}
readPair''! = let x = <-Reader> ask! in
              let y = ask! in
              pair x y

-- begin BUG: this should type-check and behave as readPair and readPair''
-- but it fails to type-check!
-- (not anymore)
readPair''' : {[Reader X, Reader Y](Pair X Y)}
readPair'''! = let y = ask! in
               let x = <-Reader> ask! in
               pair x y
-- end BUG

runReader : {S -> <Reader S>X -> X}
runReader s <ask -> k> = runReader s (k s)
runReader _ x          = x

main : {Int}
main! = case (runReader 1 (runReader 2 readPair!)) {(pair x y) -> x + y}
